#include<iostream>

using namespace std;



void main()
{

	setlocale(LC_ALL , "ukr");


	int a, b, i, j, min, ne = 1, mincost = 0;
	int visited[15] = { 0 };//компютерне подання множини вершин, перевіряємо чи вершина графа вже буладодана, щоб не було циклу
	int path[15] = { 0 }; //шлях
	int num = 0;



	


	int n = 11;
	int arr[12][12] = { {0,0,0,0,0,0,0,0,0,0,0,0},//матриця суміжності
		           	     {0,0,1,2,3,0,0,0,0,0,0,0},
			             {0,1,0,0,0,3,0,4,0,0,0,0},
     			         {0,2,0,0,0,7,6,0,0,0,0,0},
	    		         {0,3,0,0,0,0,2,4,0,0,0,0},
		    	         {0,0,3,7,0,0,0,0,7,5,0,0},
	                     {0,0,0,6,2,0,0,0,7,0,3,0},
	                     {0,0,4,0,4,0,0,0,0,5,4,0},
    	                 {0,0,0,0,0,7,7,0,0,0,0,4},
    	                 {0,0,0,0,0,5,0,5,0,0,0,1},
	                     {0,0,0,0,0,0,3,4,0,0,0,2},
	                     {0,0,0,0,0,0,0,0,4,1,2,0}
	                   };
	
	
	
	int arr2[12][12];
	for (i = 1; i < 12; i++)//та сама матриця суміжності але замість 0 999
		for (j = 0; j < 12; j++) {
			arr2[i][j] = arr[i][j];
			if (arr2[i][j] == 0)
				arr2[i][j] = 999;

		}

	visited[1] = 1;//починаємо з 1 вершини
	cout << "\n\tПошук мiнiмального остового дерева за методом Прима: ";
	while (ne < n)
	{
		for (i = 1, min = 999; i <= n; i++) {
			for (j = 1; j <= n; j++) {
				if (arr2[i][j] < min) {
					if (visited[i] != 0)
					{
						min = arr2[i][j];
						a = i;
						b = j;
					}
				}
			}
		}
		if (visited[a] == 0 || visited[b] == 0)
		{
			path[num] = b;

			num++;
			ne++; 
			mincost += min;
			visited[b] = 1;
			cout << "\n\t( " << a << ",  " << b << ")";
		}
		arr2[a][b] = arr2[b][a] = 999;

	}
	

	cout << "\n\n";
	cout << "\tV={";
	cout << 1 << ", ";
	for (int i = 0; i < n - 1; i++)
	{
		cout << path[i];
		if (i < n - 2) cout << ", ";
	}
	cout << "}";
	cout << "\n\tНайкоротший шлях = " << mincost;
	cout << endl << endl;


}